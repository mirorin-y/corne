/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo1 {
            bindings = <&kp ESCAPE>;
            key-positions = <36 37 38>;
        };

        unlock {
            bindings = <&studio_unlock>;
            key-positions = <0 12 24>;
        };
    };

    behaviors {
        tab_esc_ctrl: tab_esc_ctrl {
            compatible = "zmk,behavior-tap-dance";
            label = "TAB_ESC_CTRL";
            #binding-cells = <0>;
            bindings = <&mt LCTRL ESC>, <&kp TAB>;
        };

        gqt: global-quick-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "GLOBAL_QUICK_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <180>;
            global-quick-tap;
            flavor = "tap-preferred";
        };

        ltq: ltq {
            compatible = "zmk,behavior-hold-tap";
            label = "LTQ";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
            global-quick-tap;
        };

        caps_esc_ctrl: caps_esc_ctrl {
            compatible = "zmk,behavior-tap-dance";
            label = "CAPS_ESC_CTRL";
            #binding-cells = <0>;
            bindings = <&mt LCTRL ESC>, <&kt CAPSLOCK>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E         &kp R  &kp T        &kp Y      &kp U  &kp I         &kp O    &kp P          &kp BACKSPACE
&kp LCTRL  &kp A  &kp S  &kp D         &kp F  &kp G        &kp H      &kp J  &kp K         &kp L    &kp SEMICOLON  &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C         &kp V  &kp B        &kp N      &kp M  &kp COMMA     &kp DOT  &kp FSLH       &kp DEL
                         &kp LEFT_WIN  &mo 1  &kp SPACE    &kp ENTER  &mo 2  &kp LEFT_ALT
            >;
        };

        layer_1 {
            bindings = <
&kp TAB    &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5    &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0  &kp BACKSPACE
&kp LCTRL  &none         &kp F2        &none         &none         &none           &none         &none         &kp UP        &none         &none         &none
&kp LSHFT  &none         &kp F7        &none         &none         &none           &none         &kp LEFT      &kp DOWN      &kp RIGHT     &none         &kp DELETE
                                       &kp LEFT_WIN  &mo 1         &kp SPACE       &kp ENTER     &mo 2         &kp LALT
            >;
        };

        layer_2 {
            bindings = <
&kp TAB    &kp EXCLAMATION  &kp AT_SIGN  &kp HASH      &kp DOLLAR  &kp PERCENT    &kp CARET       &kp AMPERSAND  &kp ASTERISK      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp BACKSPACE
&kp LCTRL  &kp TILDE        &none        &none         &none       &none          &kp MINUS       &kp EQUAL      &kp LEFT_BRACKET  &kp RIGHT_BRACKET     &kp NON_US_BACKSLASH   &kp GRAVE
&kp LSHFT  &none            &none        &none         &none       &none          &kp UNDERSCORE  &kp PLUS       &kp LEFT_BRACE    &kp RIGHT_BRACE       &kp PIPE               &kp DEL
                                         &kp LEFT_WIN  &mo 1       &kp SPACE      &kp ENTER       &mo 2          &kp RIGHT_ALT
            >;
        };

        layer_3 {
            bindings = <
&trans  &bt BT_SEL 1  &bt BT_SEL 2    &bt BT_SEL 3  &bt BT_SEL 4  &none     &trans  &trans  &trans  &trans  &trans  &ext_power EP_TOG
&trans  &bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans        &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans          &trans        &trans        &trans    &trans  &trans  &trans  &trans  &trans  &trans
                                      &trans        &mo 1         &trans    &trans  &mo 2   &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        BT {
            if-layers = <1 2>;
            then-layer = <4>;
        };
    };
};
